#!/usr/bin/env python3
"""
vocoderctl - Control client for vocoder daemon
Simple CLI to communicate with the vocoder daemon via Unix socket
"""

import sys
import json
import socket
import os
from pathlib import Path

SOCKET_PATH = f"/run/user/{os.getuid()}/vocoder.sock"

def send_command(command: str) -> dict:
    """Send command to daemon and get response"""
    socket_path = Path(SOCKET_PATH)
    
    if not socket_path.exists():
        return {"error": "Daemon not running (socket not found)"}
    
    try:
        # Create Unix socket client
        client = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        client.connect(str(socket_path))
        
        # Send command
        client.send(command.encode())
        
        # Receive response
        data = client.recv(4096)
        response = json.loads(data.decode())
        
        client.close()
        return response
        
    except ConnectionRefusedError:
        return {"error": "Daemon not responding"}
    except Exception as e:
        return {"error": f"Communication error: {e}"}

def main():
    """Main entry point"""
    # Default to toggle if no command given
    command = sys.argv[1] if len(sys.argv) > 1 else "toggle"
    
    # Show usage for help
    if command in ["-h", "--help", "help"]:
        print("Usage: vocoderctl [command]")
        print("Commands:")
        print("  toggle    - Start/stop recording (default)")
        print("  start     - Start recording")
        print("  stop      - Stop recording")
        print("  status    - Show daemon status")
        print("  shutdown  - Stop the daemon")
        sys.exit(0)
    
    # Validate command
    valid_commands = ["toggle", "start", "stop", "status", "shutdown"]
    if command not in valid_commands:
        print(f"Error: Unknown command '{command}'")
        print("Use 'vocoderctl --help' for usage")
        sys.exit(1)
    
    # Send command to daemon
    response = send_command(command)
    
    # Handle response
    if "error" in response:
        print(f"Error: {response['error']}")
        
        # If daemon not running, provide helpful message
        if "not running" in response['error']:
            print("\nTo start the daemon:")
            print("  systemctl --user start vocoder.service")
            print("Or run directly:")
            print("  python3 /home/ice/dev/vocoder/bin/vocoder")
        sys.exit(1)
    else:
        # Format output based on command
        if command == "status":
            print("Vocoder Daemon Status:")
            for key, value in response.items():
                print(f"  {key}: {value}")
        else:
            # Simple confirmation for other commands
            if response.get("status"):
                # Don't print for toggle/start - let notifications handle it
                if command not in ["toggle", "start"]:
                    print(f"âœ“ {response['status']}")
    
    sys.exit(0)

if __name__ == "__main__":
    main()